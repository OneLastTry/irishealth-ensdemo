Include %occInclude

Class ENSDEMO.Installer
{

Parameter NAMESPACE As %String = "ENSDEMO";

XData Install [ XMLNamespace = INSTALLER ]
{
<Manifest>
    <Log Text="Creating ${NAMESPACE} namespace and DB..." Level="0"/>
    <Default Name="RESOURCE" Value="%DB_${NAMESPACE}" />
    <Namespace Name="${NAMESPACE}" Code="${NAMESPACE}" Data="${NAMESPACE}" Create="yes" Ensemble="1">
        <Configuration>
            <Database Name="${NAMESPACE}" Dir="${MGRDIR}${DBNAME}" Create="yes" MountAtStartup="true"/>
        </Configuration>
        <IfDef Var="SOURCE">
            <Log Text="SOURCE defined - offline install from ${SOURCE}" Level="0"/>
            <Import File="${SOURCE}" Recurse="true"/>
        </IfDef> 
    </Namespace>
</Manifest>
}

/// This is a method generator whose code is generated by XGL.
ClassMethod Installer(ByRef pVars, pLogLevel As %Integer = 3, pInstaller As %Installer.Installer, pLogger As %Installer.AbstractLogger) As %Status [ CodeMode = objectgenerator, Internal ]
{
    return ##class(%Installer.Manifest).%Generate(%compiledclass,%code,"Install")
}

ClassMethod Install(path As %String) As %Status
{
    set sc = $$$OK
    try {
        set args("NAMESPACE") = ..#NAMESPACE
        set args("DBNAME") = $zconvert(..#NAMESPACE,"L")
        set args("SOURCE") = path
        
        #; install manifest
        set sc = $$$ADDSC(sc,..Installer(.args))

        set csp = ##class(Security.Applications).%OpenId("/csp/healthshare/ensdemo")
        set csp.AutoCompile = 1
        set sc = $$$ADDSC(sc,csp.%Save())

    } catch (err) {
        set sc = $$$ADDSC(sc,err.AsStatus())
    }
    return sc
}

}
